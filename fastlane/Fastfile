# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane         

load 'util/versions.rb'
load 'util/lanes.rb'
load 'util/git.rb'

require 'base64'

default_platform(:android)

platform :android do

  desc <<~DOC
    Publish a project to a maven repository.
    
    Parameters:
      repo_url            - the url of the maven repository
      repo_user           - the username to use for authentication
      repo_password       - the password to use for authentication
      project_id          - the id of the project to be released (e.g., health-sdk, health-api-lib)
      module_id           - the id of the project's module to be released (e.g., sdk, lib)
      git_tag             - the git tag name used to release the project
      build_number        - the build number to use in the release
      signing_key_base64  - the base64 encoded ascii-armored pgp secret key (see https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys)
      signing_password    - the password for the signing key
  DOC
  lane :publish_to_maven_repo do |options|
    (repo_url, repo_user, repo_password, project_id, 
      module_id, git_tag, build_number, signing_key_base64, signing_password) = 
        check_and_get_options(options, [:repo_url, :repo_user, :repo_password, :project_id, 
          :module_id, :git_tag, :build_number, :signing_key_base64, :signing_password], UI)

    tag_version = get_project_version_from_tag(project_id, git_tag, UI)
    project_version = get_project_version_from_gradle(project_id, module_id)

    if tag_version != project_version
      UI.abort_with_message!  <<~MESSAGE
        Version in the tag is different from the project version:
          * tag       : #{tag_version}
          * project   : #{project_version}
        
        Change the version in the tag or update the project's version in "#{project_id}/#{module_id}/gradle.properties".
      MESSAGE
    end
    
    UI.message <<~MESSAGE
      Will release to a maven repository:
        * repository url  : #{repo_url}
        * gradle module   : #{project_id}:#{module_id}
        * version         : #{project_version}
        * build number    : #{build_number} 
    MESSAGE

    gradle(
      task: "#{project_id}:#{module_id}:publishReleasePublicationToReleasesRepository",
      properties: { 
        "versionCode" => build_number,
        "mavenReleasesRepoUrl" => repo_url,
        "repoUser" => repo_user,
        "repoPassword" => repo_password,
        "signingKey" => Base64.decode64(signing_key_base64),
        "signingPassword" => signing_password
      },
      print_command: false
    )

    UI.success <<~MESSAGE
      Successfully released to a maven repository:
        * repository url  : #{repo_url}
        * gradle module   : #{project_id}:#{module_id}
        * version         : #{project_version}
        * build number    : #{build_number} 
    MESSAGE
  end

  desc <<~DOC
    Publish a project to a maven snapshots repository.
    
    Parameters:
      repo_url            - the url of the maven snapshots repository
      repo_user           - the username to use for authentication
      repo_password       - the password to use for authentication
      project_id          - the id of the project to be released (e.g., health-sdk, health-api-lib)
      module_id           - the id of the project's module to be released (e.g., sdk, lib)
      signing_key_base64  - the base64 ascii-armored pgp secret key (see https://docs.gradle.org/current/userguide/signing_plugin.html#sec:in-memory-keys)
      signing_password    - the password for the signing key
  DOC
  lane :publish_to_maven_snapshots_repo do |options|
    (repo_url, repo_user, repo_password, project_id, 
      module_id, signing_key_base64, signing_password) = 
        check_and_get_options(options, [:repo_url, :repo_user, :repo_password, :project_id,
          :module_id, :signing_key_base64, :signing_password], UI)

    project_version = get_project_version_from_gradle(project_id, module_id)

    UI.message <<~MESSAGE
      Will release to a maven snapshots repository:
        * repository url  : #{repo_url}
        * gradle module   : #{project_id}:#{module_id}
        * version         : #{project_version}
    MESSAGE

    gradle(
      task: "#{project_id}:#{module_id}:publishReleasePublicationToSnapshotsRepository",
      properties: {
        "versionCode" => 0,
        "mavenSnapshotsRepoUrl" => repo_url,
        "repoUser" => repo_user,
        "repoPassword" => repo_password,
        "signingKey" => Base64.decode64(signing_key_base64),
        "signingPassword" => signing_password
      },
      print_command: false
    )

    UI.success <<~MESSAGE
      Successfully released to a maven snapshots repository:
        * repository url  : #{repo_url}
        * gradle module   : #{project_id}:#{module_id}
        * version         : #{project_version}
    MESSAGE
  end

  desc <<~DOC
    Build project documentation.
    
    Parameters:
      project_id        - the id of the project to be released (e.g., health-sdk, health-api-lib)"
      module_id         - the id of the project's module to be released (e.g., sdk, lib)"
      links_to_projects - (optional) a json array of projects that are linked to in the documentation, for example: [{"project_id": "capture-sdk", "module_id": "sdk"}]
  DOC
  lane :build_documentation do |options|
    # Required options
    (project_id, module_id) = 
      check_and_get_options(options, [:project_id, :module_id], UI)
    # Optional options
    if options[:links_to_projects]
      links_to_projects = JSON.parse options[:links_to_projects]
    else
      links_to_projects = {}
    end

    project_version = get_project_version_from_gradle(project_id, module_id)

    UI.message <<~MESSAGE
      Building documentation:
        * gradle module     : #{project_id}:#{module_id}
        * project version   : #{project_version}
    MESSAGE

    UI.message "Building reference documentation (dokka)"
    gradle(task: "#{project_id}:#{module_id}:dokkaHtmlSiblingCollector")

    sphinx_doc_dir = "../#{project_id}/#{module_id}/src/doc"

    if Dir.exists? sphinx_doc_dir
      UI.message "Building integration guide (Sphinx)"

      # Get the version for each linked project and create a space separated string of
      # env vars in the format: <project_id in snail case and uppercase>_VERSION=<project version>
      # For example: "CAPTURE_SDK_VERSION=1.11.0 BANK_API_LIBRARY_VERSION=1.5.0"
      env_vars = links_to_projects.reduce("") { |acc, project| 
        version_env_var_name = "#{project["project_id"].gsub("-", "_").upcase}_VERSION"
        version = get_project_version_from_gradle(project["project_id"], project["module_id"])
        acc + " #{version_env_var_name}=#{version}" 
      }

      Dir.chdir(sphinx_doc_dir) do
        sh("pip install -r requirements.txt")
        sh("PROJECT_VERSION=#{project_version} #{env_vars} make html")
      end

      sh("cp -a ../#{project_id}/#{module_id}/src/doc/build/* ../#{project_id}/#{module_id}/build/docs")
    end

    UI.success <<~MESSAGE
      Documentation successfully built:
        * gradle module     : #{project_id}:#{module_id}
        * project version   : #{project_version}
        * available at      : #{project_id}/#{module_id}/build/docs
    MESSAGE
  end

  desc <<~DOC
    Release project documentation on the 'gh_pages' branch.

    Releases the documentation into a folder hierarchy constructed from the project_id, module_id and project version:
    <gh_pages_url>/<project_id>/<module_id>/<project_version>
    Example: <gh_pages_url>/capture-sdk/sdk/1.11.0

    If the 'is_stable_release' option is set to 'true', then it updates the project root index.html 
    (at <gh_pages_url>/<project_id>/<module_id>/index.html) and the old documentation 
    root index.html (at <gh_pages_url>/<project_id>/<module_id>/html/index.html) 
    to automatically redirect to the released version.
    
    Parameters:
      project_id            - the id of the project to be released (e.g., health-sdk, health-api-lib)
      module_id             - the id of the project's module to be released (e.g., sdk, lib)
      git_tag               - the git tag name used to release the documentation
      ci                    - set to "true" if running on a CI machine
      git_user              - the username to use for git authentication
      git_password          - the password to use for git authentication
      documentation_title   - the title used on the root index page
      is_stable_release     - set to "true" if it's a stable release that should be shown by default 
      links_to_projects     - (optional) a json array of projects that are linked to in the documentation, for example: [{"project_id": "capture-sdk", "module_id": "sdk"}]
      dry_run               - (optional) executes without permanent side effects
  DOC
  lane :release_documentation do |options|
    # Required options
    (project_id, module_id, git_tag, ci, git_user, git_password, documentation_title, is_stable_release) = 
      check_and_get_options(options, [:project_id, :module_id, :git_tag, :ci, :git_user, :git_password, :documentation_title, :is_stable_release], UI)
    # Optional options
    dry_run = options[:dry_run]

    build_documentation(project_id: project_id, module_id: module_id, links_to_projects: options[:links_to_projects])

    tag_version = get_project_version_from_tag(project_id, git_tag, UI)
    project_version = get_project_version_from_gradle(project_id, module_id)

    if tag_version != project_version
      UI.abort_with_message!  <<~MESSAGE
        Version in the tag is different from the project version:
          * tag       : #{tag_version}
          * project   : #{project_version}
        
        Change the version in the tag or update the project's version in "#{project_id}/#{module_id}/gradle.properties".
      MESSAGE
    end

    UI.message <<~MESSAGE
      Releasing documentation:
        * gradle module       : #{project_id}:#{module_id}
        * project version     : #{project_version}
        * git tag             : #{git_tag}
        * destination branch  : gh-pages
        * destination folder  : #{project_id}/#{module_id}
        * url                 : http://developer.gini.net/gini-mobile-android/#{project_id}/#{module_id}/html
    MESSAGE

    if ci
      configure_git_on_ci_machines("Team Mobile Schorsch", "team-mobile@gini.net")
    end
    
    sh("rm -rf gh-pages")
    sh("git clone -b gh-pages https://#{git_user}:#{git_password}@github.com/gini/gini-mobile-android.git gh-pages")

    project_root_path = "#{project_id}/#{module_id}"
    destination_path = "#{project_root_path}/#{project_version}"

    Dir.chdir("gh-pages") do
      UI.message "Clear out the existing documentation"
      sh("git rm -rf #{destination_path} --ignore-unmatch && git clean -fd")

      UI.message "Copy over the current documentation"
      sh("mkdir -p #{destination_path} && cp -R ../../#{project_id}/#{module_id}/build/docs/* #{destination_path}")

      UI.message "Disable jekyll"
      sh("touch .nojekyll")

      if is_stable_release
        UI.message <<~MESSAGE
          Update the project root index.html and the old documentation root index.html to redirect to this documentation version.
        MESSAGE

        index_html = <<~INDEX_HTML
        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="UTF-8">
            <title>#{documentation_title}</title>
            <meta http-equiv="refresh" content="0; URL=https://developer.gini.net/gini-mobile-android/#{destination_path}/html/index.html" />
          </head>
          <body>
            Redirecting to the latest stable version...
          </body>
        </html>
        INDEX_HTML

        File.open("#{project_root_path}/index.html", "w") { |f| 
          f.write index_html
        }
        if File.file?("#{project_root_path}/html/index.html")
          File.open("#{project_root_path}/html/index.html", "w") { |f| 
            f.write index_html
          }
        end
      else
        UI.message "Not changing the project root index.html or the old documentation root index.html."
      end

      if !dry_run 
        UI.message "Commit and push the new documentation"
        sh("git add --all")
        sh("git diff --quiet --exit-code --cached || git commit -m 'Release #{project_id} documentation for tag #{git_tag}' --author='Team Mobile <team-mobile@gini.net>'")
        git_push_with_retry("gh-pages", UI)
      else
        UI.message "Skipping commit and push (dry run)"
      end
    end

    UI.success <<~MESSAGE
      Documentation released:
        * gradle module       : #{project_id}:#{module_id}
        * project version     : #{project_version}
        * git branch          : #{git_branch}
        * git tag             : #{git_tag}
        * destination branch  : gh-pages
        * destination folder  : #{destination_path}
        * url                 : http://developer.gini.net/gini-mobile-android/#{destination_path}/html
    MESSAGE
  end

  desc <<~DOC
    Create release tags for all projects that have different versions than their latest release tag.
  DOC
  lane :create_release_tags do |options|
    
    # Not all modules require own release tags (some are released automatically with other modules)
    ignored_modules = [/capture-sdk\/default-network/]

    Dir.chdir("..") do
      # Gather all non-ingored projects which have artifactId and version in their gradle.properties
      projects = Dir["./**/gradle.properties"]
        .map { |properties_file|
          if ignored_modules.find { |ignored| properties_file =~ ignored }
            next nil
          end

          contents = File.open(properties_file).read

          if contents =~ /artifactId=/ && contents =~ /version=/
            components = properties_file.split("/")
            { :project_id => components[1], :version => contents.match(/.*version=(.+)\n.*/)[1] }
          end
        }
        .compact

      up_to_date = []
      to_be_released = []

      # Create release tags for projects which have different versions than their latest release tag
      projects.each do |project|
        if project[:version] == get_latest_version_from_release_tags(project[:project_id], UI)
          up_to_date.push project
        else
          to_be_released.push project
          git_create_release_tag(project[:project_id], project[:version])

          if UI.confirm("Push release tag?")
            git_push_release_tag(project[:project_id], project[:version])
          end
        end
      end

      if to_be_released.empty?
        UI.success "All projects are up-to-date. No release tags needed."
      else
        UI.message <<~MESSAGE
            Following projects are up-to-date:
              #{up_to_date.map{ |project| "- #{project[:project_id]} #{project[:version]}" }.join("\n  ") }
          MESSAGE

        UI.success <<~MESSAGE
            Created release tags for:
              #{to_be_released.map{ |project| "- #{project[:project_id]} #{project[:version]}" }.join("\n  ") }
          MESSAGE
      end
    end
  end

  desc <<~DOC
    Create documentation release tags for all projects that have documentation that changed since their latest release.
  DOC
  lane :create_documentation_release_tags do
    Dir.chdir("..") do
      new_doc_release_tags = Dir["./**/src/doc"]
        .filter { |doc_dir|
          # Gather all projects which have documentation that changed since the last release
          components = doc_dir.split("/")
          project_id = components[1]
          did_folder_change_since_last_release(project_id, doc_dir, UI)
        }
        .map { |doc_dir|
          # Create documentation release tags
          components = doc_dir.split("/")
          project_id = components[1]
          latest_release_tag = get_latest_release_tag(project_id)

          if match = latest_release_tag.match(/(^.*?;)doc-([0-9]+)/)
            next_doc_release_nr = match.captures[1].to_i + 1
            "#{match.captures[0]}doc-#{next_doc_release_nr}"
          else
            "#{latest_release_tag};doc-1"
          end
        }
      
      if new_doc_release_tags.empty?
        UI.success "Every documentation is up-to-date. No documentation release tags needed."
      else
        # Create and push tags
        new_doc_release_tags.each do |new_doc_release_tag|
          git_create_tag(new_doc_release_tag)

          if UI.confirm("Push documentation release tag?")
            git_push_tag(new_doc_release_tag)
          end
        end
        
        UI.success <<~MESSAGE
            Created documentation release tags for:
              #{new_doc_release_tags.map{ |tag| "- #{tag}" }.join("\n  ") }
          MESSAGE
      end
    end
  end

end
